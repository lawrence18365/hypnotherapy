-- COMPLETE FEEDBACK UPVOTES SETUP SCRIPT\n-- Run this in your Supabase SQL editor to enable upvoting functionality\n\n-- 1. Create feedback_upvotes table if it doesn't exist\nCREATE TABLE IF NOT EXISTS feedback_upvotes (\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    feedback_submission_id UUID NOT NULL,\n    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    \n    -- Ensure a user can only upvote a feedback submission once\n    UNIQUE(feedback_submission_id, user_id)\n);\n\n-- 2. Add foreign key constraint to feedback_submissions (if table exists)\nDO $$\nBEGIN\n    -- Check if feedback_submissions table exists\n    IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'feedback_submissions') THEN\n        -- Try to add foreign key constraint\n        BEGIN\n            ALTER TABLE feedback_upvotes \n            ADD CONSTRAINT fk_feedback_upvotes_submission \n            FOREIGN KEY (feedback_submission_id) \n            REFERENCES feedback_submissions(id) \n            ON DELETE CASCADE;\n        EXCEPTION\n            WHEN duplicate_object THEN\n                -- Constraint already exists, continue\n                NULL;\n        END;\n    END IF;\nEND $$;\n\n-- 3. Create indices for better performance\nCREATE INDEX IF NOT EXISTS idx_feedback_upvotes_submission_id ON feedback_upvotes(feedback_submission_id);\nCREATE INDEX IF NOT EXISTS idx_feedback_upvotes_user_id ON feedback_upvotes(user_id);\nCREATE INDEX IF NOT EXISTS idx_feedback_upvotes_created_at ON feedback_upvotes(created_at);\n\n-- 4. Enable RLS (Row Level Security)\nALTER TABLE feedback_upvotes ENABLE ROW LEVEL SECURITY;\n\n-- 5. Drop existing policies if they exist (to avoid conflicts)\nDROP POLICY IF EXISTS \"Users can view all upvotes\" ON feedback_upvotes;\nDROP POLICY IF EXISTS \"Users can create their own upvotes\" ON feedback_upvotes;\nDROP POLICY IF EXISTS \"Users can delete their own upvotes\" ON feedback_upvotes;\n\n-- 6. Create RLS policies\nCREATE POLICY \"Users can view all upvotes\" ON feedback_upvotes\n    FOR SELECT USING (true);\n\nCREATE POLICY \"Users can create their own upvotes\" ON feedback_upvotes\n    FOR INSERT WITH CHECK (auth.uid() = user_id);\n\nCREATE POLICY \"Users can delete their own upvotes\" ON feedback_upvotes\n    FOR DELETE USING (auth.uid() = user_id);\n\n-- 7. Grant permissions\nGRANT ALL ON feedback_upvotes TO authenticated;\nGRANT SELECT ON feedback_upvotes TO anon;\n\n-- 8. Create helper function for getting upvote counts (optional)\nCREATE OR REPLACE FUNCTION get_feedback_upvote_count(submission_id UUID)\nRETURNS INTEGER AS $$\nBEGIN\n    RETURN (\n        SELECT COUNT(*)::INTEGER\n        FROM feedback_upvotes\n        WHERE feedback_submission_id = submission_id\n    );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- 9. Grant execute permission on the function\nGRANT EXECUTE ON FUNCTION get_feedback_upvote_count TO authenticated, anon;\n\n-- 10. Create helper function to check if user has upvoted (optional)\nCREATE OR REPLACE FUNCTION user_has_upvoted(submission_id UUID, user_id UUID)\nRETURNS BOOLEAN AS $$\nBEGIN\n    RETURN EXISTS (\n        SELECT 1 \n        FROM feedback_upvotes \n        WHERE feedback_submission_id = submission_id \n        AND feedback_upvotes.user_id = user_has_upvoted.user_id\n    );\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- 11. Grant execute permission on the function\nGRANT EXECUTE ON FUNCTION user_has_upvoted TO authenticated;\n\n-- 12. Add comments for documentation\nCOMMENT ON TABLE feedback_upvotes IS 'Tracks user upvotes on feedback submissions';\nCOMMENT ON COLUMN feedback_upvotes.feedback_submission_id IS 'Reference to the feedback submission being upvoted';\nCOMMENT ON COLUMN feedback_upvotes.user_id IS 'Reference to the user who upvoted';\nCOMMENT ON COLUMN feedback_upvotes.created_at IS 'When the upvote was created';\n\n-- 13. Verify the setup by showing table info\nSELECT \n    'feedback_upvotes table created successfully!' as status,\n    COUNT(*) as current_upvotes\nFROM feedback_upvotes;\n\n-- 14. Show table structure\n\\d feedback_upvotes;\n\n-- Setup complete! The upvoting system should now work perfectly.\n-- Test by:\n-- 1. Going to /feedback page\n-- 2. Submitting a feedback item\n-- 3. Clicking the upvote button\n-- 4. Watching the animated count increase!