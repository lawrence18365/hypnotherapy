/**\n * @jest-environment node\n */\nimport { NextRequest } from 'next/server'\nimport { POST } from '@/app/api/deals/submit/route'\n\n// Mock dependencies\njest.mock('@/lib/server/db')\njest.mock('next/headers')\n\nconst mockCookies = {\n  get: jest.fn(),\n  set: jest.fn()\n}\n\nconst mockUser = {\n  id: 'user-123',\n  email: 'test@example.com'\n}\n\nconst mockSupabase = {\n  auth: {\n    getUser: jest.fn().mockResolvedValue({\n      data: { user: mockUser },\n      error: null\n    })\n  },\n  from: jest.fn(() => ({\n    select: jest.fn().mockReturnThis(),\n    insert: jest.fn().mockReturnThis(),\n    eq: jest.fn().mockReturnThis(),\n    single: jest.fn().mockResolvedValue({ data: null, error: null })\n  }))\n}\n\nrequire('next/headers').cookies = jest.fn(() => mockCookies)\nrequire('@/lib/server/db').createRouteHandlerClient = jest.fn(() => mockSupabase)\n\nconst validDealData = {\n  productName: 'Test Product',\n  productWebsite: 'https://example.com',\n  title: 'Amazing Deal',\n  description: 'This is a great deal for everyone',\n  shortDescription: 'Great deal',\n  category: 'AI & Machine Learning',\n  originalPrice: 100,\n  dealPrice: 50,\n  totalCodes: 100,\n  expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days\n  pricingTier: 'free',\n  tags: ['ai', 'productivity']\n}\n\ndescribe('/api/deals/submit', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    // Reset rate limiting\n    jest.resetModules()\n  })\n\n  describe('Authentication', () => {\n    it('should reject unauthenticated requests', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: null },\n        error: new Error('Not authenticated')\n      })\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(validDealData)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(401)\n      const data = await response.json()\n      expect(data.error).toBe('Authentication required')\n    })\n  })\n\n  describe('Rate Limiting', () => {\n    it('should rate limit excessive submissions', async () => {\n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        headers: {\n          'x-forwarded-for': '192.168.1.1'\n        },\n        body: JSON.stringify(validDealData)\n      })\n      \n      // Submit multiple deals rapidly\n      for (let i = 0; i < 4; i++) {\n        await POST(request)\n      }\n      \n      const response = await POST(request)\n      expect(response.status).toBe(429)\n      const data = await response.json()\n      expect(data.error).toContain('Too many submissions')\n    })\n  })\n\n  describe('Input Validation', () => {\n    it('should reject requests with missing required fields', async () => {\n      const invalidData = { ...validDealData }\n      delete invalidData.productName\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(invalidData)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(400)\n      const data = await response.json()\n      expect(data.error).toContain('Missing required field: productName')\n    })\n\n    it('should validate field types', async () => {\n      const invalidData = {\n        ...validDealData,\n        originalPrice: 'not-a-number'\n      }\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(invalidData)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(400)\n      const data = await response.json()\n      expect(data.error).toContain('must be a valid number')\n    })\n\n    it('should sanitize HTML in text fields', async () => {\n      const maliciousData = {\n        ...validDealData,\n        title: '<script>alert(\"xss\")</script>Malicious Title',\n        description: '<iframe src=\"evil.com\"></iframe>Description'\n      }\n      \n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({ data: null, error: null }),\n        insert: jest.fn().mockResolvedValue({\n          data: { id: 'deal-123', slug: 'test-slug' },\n          error: null\n        })\n      })\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(maliciousData)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(200)\n      \n      const insertCall = mockSupabase.from().insert\n      expect(insertCall).toHaveBeenCalledWith(\n        expect.objectContaining({\n          title: expect.not.stringContaining('<script>'),\n          description: expect.not.stringContaining('<iframe>')\n        })\n      )\n    })\n\n    it('should validate URL formats', async () => {\n      const invalidData = {\n        ...validDealData,\n        productWebsite: 'not-a-url'\n      }\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(invalidData)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(400)\n      const data = await response.json()\n      expect(data.error).toBe('Invalid product website URL')\n    })\n\n    it('should validate price ranges', async () => {\n      const invalidData = {\n        ...validDealData,\n        originalPrice: 15000 // Above $10,000 limit\n      }\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(invalidData)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(400)\n      const data = await response.json()\n      expect(data.error).toContain('Prices must be between $0 and $10,000')\n    })\n\n    it('should ensure deal price is less than original price', async () => {\n      const invalidData = {\n        ...validDealData,\n        originalPrice: 50,\n        dealPrice: 100 // Higher than original\n      }\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(invalidData)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(400)\n      const data = await response.json()\n      expect(data.error).toBe('Deal price must be less than original price')\n    })\n\n    it('should validate minimum discount percentage', async () => {\n      const invalidData = {\n        ...validDealData,\n        originalPrice: 100,\n        dealPrice: 95 // Only 5% discount\n      }\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(invalidData)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(400)\n      const data = await response.json()\n      expect(data.error).toBe('Discount must be at least 10%')\n    })\n\n    it('should validate expiration date', async () => {\n      const invalidData = {\n        ...validDealData,\n        expiresAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString() // Yesterday\n      }\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(invalidData)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(400)\n      const data = await response.json()\n      expect(data.error).toContain('Invalid expiration date')\n    })\n\n    it('should limit and sanitize tags', async () => {\n      const dataWithManyTags = {\n        ...validDealData,\n        tags: Array(15).fill().map((_, i) => `tag${i}`) // 15 tags, limit is 10\n      }\n      \n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({ data: null, error: null }),\n        insert: jest.fn().mockResolvedValue({\n          data: { id: 'deal-123', slug: 'test-slug' },\n          error: null\n        })\n      })\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(dataWithManyTags)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(200)\n      \n      const insertCall = mockSupabase.from().insert\n      const insertedData = insertCall.mock.calls[0][0]\n      expect(insertedData.tags).toHaveLength(10) // Should be limited to 10\n    })\n  })\n\n  describe('Request Size Limits', () => {\n    it('should reject oversized requests', async () => {\n      const oversizedData = {\n        ...validDealData,\n        description: 'x'.repeat(60000) // 60KB description\n      }\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(oversizedData)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(413)\n      const data = await response.json()\n      expect(data.error).toBe('Request body too large')\n    })\n\n    it('should reject malformed JSON', async () => {\n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: 'invalid-json{'\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(400)\n      const data = await response.json()\n      expect(data.error).toBe('Invalid JSON format')\n    })\n  })\n\n  describe('Duplicate Prevention', () => {\n    it('should prevent duplicate slugs', async () => {\n      // Mock existing deal with same slug\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: { id: 'existing-deal' },\n          error: null\n        })\n      })\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(validDealData)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(409)\n      const data = await response.json()\n      expect(data.error).toContain('already exists')\n    })\n  })\n\n  describe('Successful Submission', () => {\n    it('should successfully submit a valid deal', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({ data: null, error: null }),\n        insert: jest.fn().mockResolvedValue({\n          data: {\n            id: 'deal-123',\n            slug: 'amazing-deal-123456',\n            title: 'Amazing Deal',\n            status: 'pending_review',\n            pricing_tier: 'free',\n            created_at: new Date().toISOString()\n          },\n          error: null\n        })\n      })\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(validDealData)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(200)\n      const data = await response.json()\n      expect(data.success).toBe(true)\n      expect(data.deal.id).toBe('deal-123')\n      expect(data.message).toBe('Deal submitted successfully for review')\n    })\n\n    it('should include security tracking data', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({ data: null, error: null }),\n        insert: jest.fn().mockResolvedValue({\n          data: { id: 'deal-123', slug: 'test-slug' },\n          error: null\n        })\n      })\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        headers: {\n          'x-forwarded-for': '192.168.1.1'\n        },\n        body: JSON.stringify(validDealData)\n      })\n      \n      await POST(request)\n      \n      const insertCall = mockSupabase.from().insert\n      expect(insertCall).toHaveBeenCalledWith(\n        expect.objectContaining({\n          submission_ip: '192.168.1.1',\n          submitted_at: expect.any(String)\n        })\n      )\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('should handle database insertion errors', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({ data: null, error: null }),\n        insert: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Database constraint violation' }\n        })\n      })\n      \n      const request = new NextRequest('http://localhost:3000/api/deals/submit', {\n        method: 'POST',\n        body: JSON.stringify(validDealData)\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(500)\n      const data = await response.json()\n      expect(data.error).toBe('Failed to submit deal')\n    })\n  })\n})\n