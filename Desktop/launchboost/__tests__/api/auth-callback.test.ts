/**\n * @jest-environment node\n */\nimport { NextRequest } from 'next/server'\nimport { POST } from '@/app/api/auth/callback/route'\n\n// Mock dependencies\njest.mock('@/lib/server/db')\njest.mock('next/headers')\n\nconst mockCookies = {\n  get: jest.fn(),\n  set: jest.fn(),\n  delete: jest.fn()\n}\n\nconst mockSupabase = {\n  auth: {\n    exchangeCodeForSession: jest.fn()\n  },\n  from: jest.fn(() => ({\n    upsert: jest.fn().mockResolvedValue({ data: {}, error: null })\n  }))\n}\n\nrequire('next/headers').cookies = jest.fn(() => mockCookies)\nrequire('@/lib/server/db').createRouteHandlerClient = jest.fn(() => mockSupabase)\n\ndescribe('/api/auth/callback', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('Authentication Security', () => {\n    it('should handle missing auth code', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/callback')\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(302) // Redirect\n      expect(response.headers.get('location')).toContain('error=invalid_request')\n    })\n\n    it('should handle auth exchange failure', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/callback?code=invalid_code')\n      \n      mockSupabase.auth.exchangeCodeForSession.mockResolvedValue({\n        data: null,\n        error: { message: 'Invalid code' }\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(302)\n      expect(response.headers.get('location')).toContain('error=auth_failed')\n    })\n\n    it('should validate email format', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/callback?code=valid_code')\n      \n      mockSupabase.auth.exchangeCodeForSession.mockResolvedValue({\n        data: {\n          user: {\n            id: 'user-123',\n            email: 'invalid-email',\n            user_metadata: {}\n          },\n          session: { access_token: 'token' }\n        },\n        error: null\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(302)\n      expect(response.headers.get('location')).toContain('error=invalid_email')\n    })\n\n    it('should rate limit excessive requests', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/callback?code=test', {\n        headers: {\n          'x-forwarded-for': '192.168.1.1'\n        }\n      })\n      \n      // Simulate multiple rapid requests\n      for (let i = 0; i < 6; i++) {\n        await POST(request)\n      }\n      \n      const response = await POST(request)\n      expect(response.status).toBe(302)\n      expect(response.headers.get('location')).toContain('error=rate_limited')\n    })\n\n    it('should successfully process valid authentication', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/callback?code=valid_code')\n      \n      mockSupabase.auth.exchangeCodeForSession.mockResolvedValue({\n        data: {\n          user: {\n            id: 'user-123',\n            email: 'test@example.com',\n            email_confirmed_at: new Date().toISOString(),\n            user_metadata: {\n              full_name: 'Test User',\n              avatar_url: 'https://example.com/avatar.jpg'\n            }\n          },\n          session: { access_token: 'token' }\n        },\n        error: null\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(302)\n      expect(response.headers.get('location')).toBe('http://localhost:3000/')\n      expect(mockSupabase.from).toHaveBeenCalledWith('profiles')\n    })\n\n    it('should sanitize user input data', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/callback?code=valid_code')\n      \n      mockSupabase.auth.exchangeCodeForSession.mockResolvedValue({\n        data: {\n          user: {\n            id: 'user-123',\n            email: 'test@example.com',\n            email_confirmed_at: new Date().toISOString(),\n            user_metadata: {\n              full_name: '<script>alert(\"xss\")</script>Test User',\n              avatar_url: 'https://example.com/avatar.jpg'\n            }\n          },\n          session: { access_token: 'token' }\n        },\n        error: null\n      })\n      \n      await POST(request)\n      \n      const upsertCall = mockSupabase.from().upsert\n      expect(upsertCall).toHaveBeenCalledWith(\n        expect.objectContaining({\n          full_name: expect.not.stringContaining('<script>')\n        }),\n        expect.any(Object)\n      )\n    })\n\n    it('should set security headers', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/callback?code=valid_code')\n      \n      mockSupabase.auth.exchangeCodeForSession.mockResolvedValue({\n        data: {\n          user: {\n            id: 'user-123',\n            email: 'test@example.com',\n            user_metadata: {}\n          },\n          session: { access_token: 'token' }\n        },\n        error: null\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.headers.get('X-Content-Type-Options')).toBe('nosniff')\n      expect(response.headers.get('X-Frame-Options')).toBe('DENY')\n      expect(response.headers.get('X-XSS-Protection')).toBe('1; mode=block')\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('should handle database errors gracefully', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/callback?code=valid_code')\n      \n      mockSupabase.auth.exchangeCodeForSession.mockResolvedValue({\n        data: {\n          user: {\n            id: 'user-123',\n            email: 'test@example.com',\n            user_metadata: {}\n          },\n          session: { access_token: 'token' }\n        },\n        error: null\n      })\n      \n      mockSupabase.from.mockReturnValue({\n        upsert: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Database error' }\n        })\n      })\n      \n      const response = await POST(request)\n      \n      // Should still redirect successfully even if profile creation fails\n      expect(response.status).toBe(302)\n      expect(response.headers.get('location')).toBe('http://localhost:3000/')\n    })\n\n    it('should handle unexpected errors', async () => {\n      const request = new NextRequest('http://localhost:3000/api/auth/callback?code=valid_code')\n      \n      mockSupabase.auth.exchangeCodeForSession.mockRejectedValue(\n        new Error('Network error')\n      )\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(302)\n      expect(response.headers.get('location')).toContain('error=server_error')\n    })\n  })\n})\n