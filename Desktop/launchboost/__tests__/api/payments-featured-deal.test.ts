/**\n * @jest-environment node\n */\nimport { NextRequest } from 'next/server'\nimport { POST } from '@/app/api/payments/featured-deal/route'\n\n// Mock dependencies\njest.mock('@/lib/server/db')\njest.mock('@/lib/server/auth')\njest.mock('stripe')\n\nconst mockUser = {\n  id: 'user-123',\n  email: 'test@example.com'\n}\n\nconst mockDeal = {\n  id: 'deal-123',\n  title: 'Test Deal',\n  founder_id: 'user-123',\n  pricing_tier: 'free',\n  product_logo_url: 'https://example.com/logo.jpg'\n}\n\nconst mockSupabase = {\n  from: jest.fn(() => ({\n    select: jest.fn().mockReturnThis(),\n    eq: jest.fn().mockReturnThis(),\n    single: jest.fn().mockResolvedValue({\n      data: mockDeal,\n      error: null\n    })\n  }))\n}\n\nconst mockStripeSession = {\n  id: 'cs_test_123',\n  url: 'https://checkout.stripe.com/pay/cs_test_123'\n}\n\nconst mockStripe = {\n  checkout: {\n    sessions: {\n      create: jest.fn().mockResolvedValue(mockStripeSession)\n    }\n  }\n}\n\n// Mock the Stripe constructor\njest.mock('stripe', () => {\n  return jest.fn().mockImplementation(() => mockStripe)\n})\n\nrequire('@/lib/server/db').createServerComponentClient = jest.fn(() => mockSupabase)\nrequire('@/lib/server/auth').requireAuth = jest.fn().mockResolvedValue(mockUser)\n\ndescribe('/api/payments/featured-deal', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    process.env.STRIPE_SECRET_KEY = 'sk_test_123'\n    process.env.NEXT_PUBLIC_APP_URL = 'http://localhost:3000'\n  })\n\n  describe('Authentication', () => {\n    it('should reject unauthenticated requests', async () => {\n      require('@/lib/server/auth').requireAuth.mockRejectedValue(\n        new Error('Unauthorized')\n      )\n      \n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(500) // Error handling for auth failure\n    })\n  })\n\n  describe('Input Validation', () => {\n    it('should require dealId', async () => {\n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({})\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(400)\n      const data = await response.json()\n      expect(data.error).toBe('Deal ID is required')\n    })\n  })\n\n  describe('Deal Ownership Verification', () => {\n    it('should verify deal ownership', async () => {\n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      await POST(request)\n      \n      expect(mockSupabase.from).toHaveBeenCalledWith('deals')\n      const selectChain = mockSupabase.from().select().eq().eq().single\n      expect(selectChain).toHaveBeenCalled()\n    })\n\n    it('should reject deals not owned by user', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Deal not found' }\n        })\n      })\n      \n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(404)\n      const data = await response.json()\n      expect(data.error).toBe('Deal not found or unauthorized')\n    })\n  })\n\n  describe('Deal Status Validation', () => {\n    it('should reject already featured deals', async () => {\n      const featuredDeal = {\n        ...mockDeal,\n        pricing_tier: 'featured'\n      }\n      \n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: featuredDeal,\n          error: null\n        })\n      })\n      \n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(400)\n      const data = await response.json()\n      expect(data.error).toBe('Deal is already featured')\n    })\n\n    it('should reject already pro deals', async () => {\n      const proDeal = {\n        ...mockDeal,\n        pricing_tier: 'pro'\n      }\n      \n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: proDeal,\n          error: null\n        })\n      })\n      \n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(400)\n      const data = await response.json()\n      expect(data.error).toBe('Deal is already featured')\n    })\n  })\n\n  describe('Stripe Integration', () => {\n    it('should create Stripe checkout session with correct amount', async () => {\n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      await POST(request)\n      \n      expect(mockStripe.checkout.sessions.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          payment_method_types: ['card'],\n          line_items: [\n            expect.objectContaining({\n              price_data: expect.objectContaining({\n                currency: 'usd',\n                unit_amount: 1999, // $19.99 in cents\n                product_data: expect.objectContaining({\n                  name: 'Featured Deal Promotion',\n                  description: expect.stringContaining('Test Deal')\n                })\n              }),\n              quantity: 1\n            })\n          ],\n          mode: 'payment'\n        })\n      )\n    })\n\n    it('should include deal logo in product data if available', async () => {\n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      await POST(request)\n      \n      expect(mockStripe.checkout.sessions.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          line_items: [\n            expect.objectContaining({\n              price_data: expect.objectContaining({\n                product_data: expect.objectContaining({\n                  images: ['https://example.com/logo.jpg']\n                })\n              })\n            })\n          ]\n        })\n      )\n    })\n\n    it('should set correct success and cancel URLs', async () => {\n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      await POST(request)\n      \n      expect(mockStripe.checkout.sessions.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          success_url: 'http://localhost:3000/dashboard/deals/deal-123?featured=success',\n          cancel_url: 'http://localhost:3000/dashboard/deals/deal-123?featured=cancelled'\n        })\n      )\n    })\n\n    it('should include metadata for tracking', async () => {\n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      await POST(request)\n      \n      expect(mockStripe.checkout.sessions.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          metadata: {\n            dealId: 'deal-123',\n            userId: 'user-123',\n            tier: 'featured',\n            type: 'deal_promotion'\n          },\n          customer_email: 'test@example.com'\n        })\n      )\n    })\n  })\n\n  describe('Successful Payment Session Creation', () => {\n    it('should return session details on success', async () => {\n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(200)\n      const data = await response.json()\n      expect(data).toEqual({\n        sessionId: 'cs_test_123',\n        url: 'https://checkout.stripe.com/pay/cs_test_123'\n      })\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('should handle Stripe errors gracefully', async () => {\n      mockStripe.checkout.sessions.create.mockRejectedValue(\n        new Error('Stripe API error')\n      )\n      \n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(500)\n      const data = await response.json()\n      expect(data.error).toBe('Internal server error')\n    })\n\n    it('should handle database errors', async () => {\n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockRejectedValue(new Error('Database error'))\n      })\n      \n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(500)\n      const data = await response.json()\n      expect(data.error).toBe('Internal server error')\n    })\n  })\n\n  describe('Security Validations', () => {\n    it('should validate environment variables', async () => {\n      delete process.env.STRIPE_SECRET_KEY\n      \n      // This would cause the Stripe constructor to fail\n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      const response = await POST(request)\n      \n      expect(response.status).toBe(500)\n    })\n\n    it('should sanitize deal title in product description', async () => {\n      const maliciousDeal = {\n        ...mockDeal,\n        title: '<script>alert(\"xss\")</script>Malicious Deal'\n      }\n      \n      mockSupabase.from.mockReturnValue({\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: maliciousDeal,\n          error: null\n        })\n      })\n      \n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      await POST(request)\n      \n      const createCall = mockStripe.checkout.sessions.create.mock.calls[0][0]\n      const description = createCall.line_items[0].price_data.product_data.description\n      \n      expect(description).not.toContain('<script>')\n      expect(description).toContain('Malicious Deal')\n    })\n  })\n\n  describe('Price Consistency', () => {\n    it('should use the correct featured deal price', async () => {\n      const request = new NextRequest('http://localhost:3000/api/payments/featured-deal', {\n        method: 'POST',\n        body: JSON.stringify({ dealId: 'deal-123' })\n      })\n      \n      await POST(request)\n      \n      const createCall = mockStripe.checkout.sessions.create.mock.calls[0][0]\n      const unitAmount = createCall.line_items[0].price_data.unit_amount\n      \n      // Ensure it's $19.99, not $99 as mentioned in the senior dev analysis\n      expect(unitAmount).toBe(1999) // $19.99 in cents\n    })\n  })\n})\n