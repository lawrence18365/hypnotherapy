-- VERIFY UPVOTING SYSTEM IS WORKING\n-- Run this after completing the database setup to verify everything works\n\n-- 1. Check if all required tables exist\nSELECT \n    table_name,\n    CASE \n        WHEN table_name = 'feedback_submissions' THEN '‚úÖ Feedback submissions table'\n        WHEN table_name = 'feedback_upvotes' THEN '‚úÖ Upvotes tracking table'\n        ELSE table_name\n    END as description\nFROM information_schema.tables \nWHERE table_name IN ('feedback_submissions', 'feedback_upvotes')\nORDER BY table_name;\n\n-- 2. Check if helper functions exist\nSELECT \n    routine_name,\n    CASE \n        WHEN routine_name = 'find_feedback_by_id_suffix' THEN '‚úÖ UUID search function'\n        WHEN routine_name = 'get_feedback_upvote_count' THEN '‚úÖ Upvote counter function'\n        WHEN routine_name = 'user_has_upvoted' THEN '‚úÖ User vote checker function'\n        ELSE routine_name\n    END as description\nFROM information_schema.routines \nWHERE routine_name IN ('find_feedback_by_id_suffix', 'get_feedback_upvote_count', 'user_has_upvoted')\nORDER BY routine_name;\n\n-- 3. Check if we have feedback submissions to test with\nSELECT \n    COUNT(*) as total_feedback,\n    CASE \n        WHEN COUNT(*) > 0 THEN '‚úÖ Ready for testing'\n        ELSE '‚ö†Ô∏è No feedback items - submit one first'\n    END as status\nFROM feedback_submissions;\n\n-- 4. Show sample feedback items with their slugs\nSELECT \n    id,\n    subject,\n    -- Generate the slug that would be used\n    LOWER(REGEXP_REPLACE(subject, '[^a-zA-Z0-9\\s-]', '', 'g')) || '-' || RIGHT(id::TEXT, 6) as expected_slug,\n    created_at\nFROM feedback_submissions \nORDER BY created_at DESC \nLIMIT 3;\n\n-- 5. Test the UUID search function with a real ID\nDO $$\nDECLARE\n    test_id UUID;\n    test_suffix TEXT;\n    found_count INTEGER;\nBEGIN\n    -- Get a sample feedback submission\n    SELECT id INTO test_id FROM feedback_submissions LIMIT 1;\n    \n    IF test_id IS NOT NULL THEN\n        test_suffix := RIGHT(test_id::TEXT, 6);\n        \n        -- Test the search function\n        SELECT COUNT(*) INTO found_count \n        FROM find_feedback_by_id_suffix(test_suffix);\n        \n        RAISE NOTICE '‚úÖ Testing UUID search function:';\n        RAISE NOTICE '   Full ID: %', test_id;\n        RAISE NOTICE '   Suffix: %', test_suffix;\n        RAISE NOTICE '   Found: % items', found_count;\n        \n        IF found_count > 0 THEN\n            RAISE NOTICE '‚úÖ UUID search function works correctly!';\n        ELSE\n            RAISE NOTICE '‚ùå UUID search function failed to find the item';\n        END IF;\n    ELSE\n        RAISE NOTICE '‚ö†Ô∏è No feedback submissions found for testing';\n        RAISE NOTICE '   Please submit a feedback item first, then re-run this test';\n    END IF;\nEND $$;\n\n-- 6. Check RLS policies\nSELECT \n    tablename,\n    policyname,\n    CASE \n        WHEN policyname LIKE '%view%' THEN '‚úÖ Read access policy'\n        WHEN policyname LIKE '%create%' THEN '‚úÖ Create access policy'\n        WHEN policyname LIKE '%delete%' THEN '‚úÖ Delete access policy'\n        ELSE policyname\n    END as description\nFROM pg_policies \nWHERE tablename = 'feedback_upvotes'\nORDER BY policyname;\n\n-- 7. Final status check\nSELECT \n    'üéâ VERIFICATION COMPLETE' as status,\n    'Your upvoting system should now work perfectly!' as message,\n    'Go to /feedback and try clicking the upvote buttons!' as next_step;